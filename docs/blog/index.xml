<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Blame Laird</title>
    <link>https://ljnelson.github.io/blog/</link>
    <description>Recent content in Blog on Blame Laird</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>ljnelson@gmail.com (Laird Nelson)</managingEditor>
    <webMaster>ljnelson@gmail.com (Laird Nelson)</webMaster>
    <lastBuildDate>Fri, 17 Dec 2021 14:18:00 -0800</lastBuildDate><atom:link href="https://ljnelson.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Determinism, Presence and Absence</title>
      <link>https://ljnelson.github.io/blog/presence-and-absence/</link>
      <pubDate>Sun, 10 Apr 2022 14:08:24 -0700</pubDate>
      <author>ljnelson@gmail.com (Laird Nelson)</author>
      <guid>https://ljnelson.github.io/blog/presence-and-absence/</guid>
      <description>&lt;div&gt;
  &lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#determinism-presence-and-absence&#34;&gt;Determinism, Presence and Absence&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#determinism&#34;&gt;Determinism&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#presence-and-absence&#34;&gt;Presence and Absence&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#introducing-optionalsupplier&#34;&gt;Introducing &lt;code&gt;OptionalSupplier&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;determinism-presence-and-absence&#34;&gt;Determinism, Presence and Absence&lt;/h2&gt;
&lt;p&gt;In this ongoing series related to Java configuration I&amp;rsquo;ve most
recently covered &lt;a href=&#34;https://ljnelson.github.io/blog/qualifiers/&#34;&gt;what qualifiers are&lt;/a&gt;.  They are strongly related to &lt;a href=&#34;https://ljnelson.github.io/blog/paths/&#34;&gt;what paths are&lt;/a&gt;.  A path picks out some possible objects in
objectspace.  Those objects may or may not exist.  Whether they are
known to exist, and for how long, is the subject of this post.&lt;/p&gt;
&lt;h2 id=&#34;determinism&#34;&gt;Determinism&lt;/h2&gt;
&lt;p&gt;Determinism is, very loosely speaking: if you put the same stuff in
twice, you&amp;rsquo;ll get the same result twice.&lt;/p&gt;
&lt;p&gt;What does &amp;ldquo;same&amp;rdquo; mean?  For most purposes, &amp;ldquo;same&amp;rdquo; can simply mean
&amp;ldquo;indistinguishable&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If I have a sane implementation of &lt;code&gt;public final int add(final int a, final int b)&lt;/code&gt;, then if you call this method 47 times, supplying it
with &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; respectively each time, you&amp;rsquo;ll get &lt;code&gt;2&lt;/code&gt;, each time.&lt;/p&gt;
&lt;p&gt;Why does this matter in configuration land?  It&amp;rsquo;s kind of a
Schr√∂dinger&amp;rsquo;s cat situation.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you have a &lt;code&gt;Supplier&amp;lt;? extends String&amp;gt;&lt;/code&gt; in your hand and you&amp;rsquo;re about to call
its &lt;code&gt;get()&lt;/code&gt; method.  Will it return a value?&lt;/p&gt;
&lt;p&gt;Will it throw an exception?&lt;/p&gt;
&lt;p&gt;You don&amp;rsquo;t know until you try it.  So OK, let&amp;rsquo;s say you call it.  Boom:
it throws an exception.&lt;/p&gt;
&lt;p&gt;If you call it again, will it throw an exception again?  Will it be an
exception that is indistinguishable from the prior one?  Or will you
get a value this time?&lt;/p&gt;
&lt;p&gt;You don&amp;rsquo;t know; you have to try it.  So OK, let&amp;rsquo;s say you call it
again.  This time it returns &amp;ldquo;Hello, world!&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This supplier is non-deterministic.  There&amp;rsquo;s no way to know what it is
going to do.  To learn what it&amp;rsquo;s going to do, you could read the
documentation, which might or might not be correct.  Perhaps the
documentation mentions that it could throw a &lt;code&gt;NoSuchElementException&lt;/code&gt;
at any point for any reason.  Now you know it&amp;rsquo;s non-deterministic.  It
would be kind of nice if this information were actually available
programmatically.&lt;/p&gt;
&lt;p&gt;Suppose this time you have a different &lt;code&gt;Supplier&amp;lt;? extends String&amp;gt;&lt;/code&gt; in
your hand.  Suppose you call it 347 times and it returns &amp;ldquo;Hello,
world!&amp;rdquo; each of those times.  Is it deterministic?  Maybe; you still
don&amp;rsquo;t know.&lt;/p&gt;
&lt;p&gt;Determinism is critical in configuration land because it helps you
understand when a piece of configuration might change (and I haven&amp;rsquo;t
even &lt;em&gt;begun&lt;/em&gt; to dive into the fetid swamp that is mutable
configuration) and when it is guaranteed (to the extent possible) to
be constant.&lt;/p&gt;
&lt;h2 id=&#34;presence-and-absence&#34;&gt;Presence and Absence&lt;/h2&gt;
&lt;p&gt;Some values in configuration land are &lt;em&gt;present&lt;/em&gt;.  If I ask a loading
system for a type of &lt;a href=&#34;https://ljnelson.github.io/blog/qualifiers/&#34;&gt;qualified&lt;/a&gt;
object, the loading system might return me a suitable value.  That
value is &lt;em&gt;present&lt;/em&gt;: I asked for it, and I got it.  (If I ask a loading
system for it again, will I get the same object back?  That&amp;rsquo;s
determinism, an orthoganal concept.)&lt;/p&gt;
&lt;p&gt;Some values in configuration land are &lt;em&gt;absent&lt;/em&gt;.  If I ask a loading
system for a type of &lt;a href=&#34;https://ljnelson.github.io/blog/qualifiers/&#34;&gt;qualified&lt;/a&gt;
object, the loading system might &lt;em&gt;not&lt;/em&gt; return me a suitable value.
That value is &lt;em&gt;absent&lt;/em&gt;: I asked for it, and I didn&amp;rsquo;t get anything.
Again, determinism and absence are orthogonal.&lt;/p&gt;
&lt;p&gt;Additionally: &lt;strong&gt;presence and absence have nothing to do with &lt;code&gt;null&lt;/code&gt;.&lt;/strong&gt;
Some present values can be &lt;code&gt;null&lt;/code&gt; and it&amp;rsquo;s entirely possible to
represent absence with an object.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go back to the &lt;code&gt;Supplier&lt;/code&gt; example.  If you were able to query
the &lt;code&gt;Supplier&lt;/code&gt; to see what sorts of machinery it hides, you could see
whether you might have to call &lt;code&gt;get()&lt;/code&gt; one time or many times, and you
could tell whether, if it returns &lt;code&gt;null&lt;/code&gt;, that represents the presence
of a value explicitly set to &lt;code&gt;null&lt;/code&gt; or the absence of a value
altogether.&lt;/p&gt;
&lt;p&gt;If you could also query the supplier to find out whether the presence
or absence it reports is permanent or transient, then you would also
know whether it was deterministic.&lt;/p&gt;
&lt;p&gt;In practice, these orthogonal concepts can be folded together into,
say, an &lt;code&gt;enum&lt;/code&gt; whose values might be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ABSENT&lt;/code&gt;: describes permanent (and hence deterministic) absence.
In the &lt;code&gt;Supplier&lt;/code&gt; example, there really isn&amp;rsquo;t any point to calling
the &lt;code&gt;get()&lt;/code&gt; method.  If we say that absence is indicated by the
throwing of an exception, for example, then any time you call
&lt;code&gt;get()&lt;/code&gt; you are guaranteed it will throw an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PRESENT&lt;/code&gt;: describes permanent (and hence deterministic) presence.
In the &lt;code&gt;Supplier&lt;/code&gt; example, you can call the &lt;code&gt;get()&lt;/code&gt; method once and
be confident that you&amp;rsquo;ll receive the one value it will forever
return.  That value, of course, might be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DETERMINISTIC&lt;/code&gt;: describes permanent absence or presence, but you
don&amp;rsquo;t know which until you try.  In the &lt;code&gt;Supplier&lt;/code&gt; example, maybe
&lt;code&gt;get()&lt;/code&gt; will return a value (which may be &lt;code&gt;null&lt;/code&gt;) and maybe it will
throw an exception.  Whatever it does, it will do for every
subsequent invocation.  That&amp;rsquo;s useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NON_DETERMINISTIC&lt;/code&gt;: who knows what will happen.  This is the
default mode of &lt;code&gt;Supplier&lt;/code&gt;s everywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some configuration systems clumsily stumble around these concepts,
some with better results than others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MicroProfile Config and good old System properties are the worst
here, since they conflate the concept of &lt;code&gt;null&lt;/code&gt; and, in some cases,
empty strings, with value absence.  Oops.  At least you can test if
the System properties contain a key to discover absence
vs. presence of a given value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lightbend&amp;rsquo;s Typesafe Config tries very hard to do this but still
falls down a little bit.  You can &lt;a href=&#34;https://lightbend.github.io/config/latest/api/com/typesafe/config/Config.html#hasPathOrNull-java.lang.String-&#34;&gt;dig into the
&lt;code&gt;hasPathOrNull(String)&lt;/code&gt;
javadoc&lt;/a&gt;
to see the gymnastics, and don&amp;rsquo;t forget to consider that although
it calls itself an immutable configuration system there&amp;rsquo;s also
&lt;a href=&#34;https://lightbend.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html#invalidateCaches--&#34;&gt;&lt;code&gt;invalidateCaches()&lt;/code&gt;&lt;/a&gt;
to pay attention to.  So much for determinism!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JNDI at least knows that &lt;code&gt;null&lt;/code&gt; is a valid value, so defines the
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/NameNotFoundException.html&#34;&gt;&lt;code&gt;NameNotFoundException&lt;/code&gt;&lt;/a&gt;
type, so you can distinguish between absence and presence.  In
theory, a &lt;code&gt;Context&lt;/code&gt;&amp;rsquo;s &lt;code&gt;environment&lt;/code&gt; could contain this information,
but it is not standardized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jakarta RESTful Web Services is obviously an HTTP-centric
specification and so can take advantage of the various HTTP caching
directives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introducing-optionalsupplier&#34;&gt;Introducing &lt;code&gt;OptionalSupplier&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To solve this problem, let&amp;rsquo;s introduce &lt;code&gt;OptionalSupplier&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wait, you say, how come we can&amp;rsquo;t just use &lt;code&gt;java.util.Optional&lt;/code&gt;?
Because &lt;code&gt;Optional&lt;/code&gt; is designed for &lt;code&gt;Stream&lt;/code&gt; operations that cannot or
should not return &lt;code&gt;null&lt;/code&gt;, and so deliberately equates &lt;code&gt;null&lt;/code&gt; with
&amp;ldquo;emptiness&amp;rdquo;, a concept similar to, but not equal to, absence.&lt;/p&gt;
&lt;p&gt;Nevertheless, some of the fluent methods on &lt;code&gt;Optional&lt;/code&gt; are quite
useful.  So what if we took the spirit of &lt;code&gt;java.util.Optional&lt;/code&gt; and
applied it to a &lt;code&gt;Supplier&lt;/code&gt;, with explicit rules on how &lt;code&gt;get()&lt;/code&gt;
behaves, allowing for the possibility of &lt;code&gt;null&lt;/code&gt; as a valid value?&lt;/p&gt;
&lt;p&gt;Then you could do things like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;optionalSupplier&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;determinism&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;case&lt;/span&gt; ABSENT&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// You&amp;#39;re never going to get a value; use a default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// value instead maybe. Or you could throw an exception.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// Or you could go ahead and call get() and let *it*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// throw an exception to indicate absence. Here we
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// use a default value.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  greeting &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;case&lt;/span&gt; PRESENT&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// You only have to call get() once, and it won&amp;#39;t throw.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// It will always return the same value.  You could use
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// this information later to decide what to do about
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// caching and such.  Note the lack of the try/catch block.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  greeting &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; optionalSupplier&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;case&lt;/span&gt; DETERMINISTIC&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// Whatever get() does, it will always do, but we don&amp;#39;t
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// know what it will do.  Guard appropriately.  With this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// information you might be able to decide caching semantics
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// or abort early.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    greeting &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; optionalSupplier&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;final&lt;/span&gt; NoSuchElementException permanentlyAbsent&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// forever absent; use a default value, maybe?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;    greeting &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;case&lt;/span&gt; NON_DETERMINISTIC&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// We don&amp;#39;t know what get() is going to do when it is called.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// Guard appropriately, and now you know that greeting shouldn&amp;#39;t
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// be cached, or, if you want to cache it, that a new value for
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// it might be returned by a get() invocation at any time.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    greeting &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; optionalSupplier&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;final&lt;/span&gt; NoSuchElementException absentForNow&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// Absent, but optionalSupplier.get() might return a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// present value later.  For this example we just use a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// default value.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;    greeting &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;new&lt;/span&gt; AssertionError&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Impossible enum constant: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt; optionalSupplier&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;determinism&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or you could do some fluentish stuff like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// This looks just like Optional.orElse(), but of course at the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// end of all this greeting may very well be null.  Absence is
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// not java.util.Optional emptiness.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;String greeting &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; optionalSupplier&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;orElse&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// This assertion, in other words, might fail:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// assert greeting != null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now we have notions of what a path is, what qualifiers are, and
whether any given value in configuration land is permanently or
transiently present or absent.  There&amp;rsquo;s just one last foundational
piece to this whole thing, and that&amp;rsquo;s subtyping and Java type
assignability semantics‚Äîcoming up next.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Qualifiers</title>
      <link>https://ljnelson.github.io/blog/qualifiers/</link>
      <pubDate>Sun, 10 Apr 2022 12:39:47 -0700</pubDate>
      <author>ljnelson@gmail.com (Laird Nelson)</author>
      <guid>https://ljnelson.github.io/blog/qualifiers/</guid>
      <description>&lt;div&gt;
  &lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#qualifiers&#34;&gt;Qualifiers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#jsr-330-and-jakarta-dependency-injection&#34;&gt;JSR-330 and Jakarta Dependency Injection&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#qualifiers-suitability-and-ambiguity&#34;&gt;Qualifiers, Suitability and Ambiguity&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#qualifiers-and-just-enough-set-theory&#34;&gt;Qualifiers and Just Enough Set Theory&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-model&#34;&gt;The Model&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;qualifiers&#34;&gt;Qualifiers&lt;/h2&gt;
&lt;p&gt;In this ongoing series related to Java configuration, I&amp;rsquo;ve most
recently covered &lt;a href=&#34;https://ljnelson.github.io/blog/paths/&#34;&gt;what a path is&lt;/a&gt;.  I
described what a path consists of, and introduced the notion of
&lt;em&gt;qualifiers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this post I&amp;rsquo;ll talk a bit more about qualifiers.&lt;/p&gt;
&lt;h2 id=&#34;jsr-330-and-jakarta-dependency-injection&#34;&gt;JSR-330 and Jakarta Dependency Injection&lt;/h2&gt;
&lt;p&gt;I think that good old JSR-330 (now &lt;a href=&#34;https://jakarta.ee/specifications/dependency-injection/2.0&#34;&gt;Jakarta Dependency
Injection&lt;/a&gt;)
was the first to explicitly define the notion of a
&lt;a href=&#34;https://jakarta.ee/specifications/dependency-injection/2.0/apidocs/jakarta/inject/qualifier&#34;&gt;qualifier&lt;/a&gt;.
In Jakarta Dependency Injection&amp;rsquo;s case, a qualifier is necessarily an
annotation, but disregard that for the time being, because it&amp;rsquo;s not at
all important.&lt;/p&gt;
&lt;p&gt;The documentation is terse to the point of being almost useless, but
if you look at it long enough you start to see that a
qualifier‚Äîthe abstract notion, mind you‚Äîis an immutable
value for an immutable, usually unnamed, implied attribute.  (I&amp;rsquo;ve
been &lt;a href=&#34;https://lairdnelson.wordpress.com/2017/01/31/cdi-qualifiers-are-values/&#34;&gt;somewhat fascinated by all
this&lt;/a&gt;
for quite a while now.)&lt;/p&gt;
&lt;p&gt;So in the Jakarta Dependency Injection documentation, the
&lt;a href=&#34;https://jakarta.ee/specifications/dependency-injection/2.0/apidocs/jakarta/inject/qualifier&#34;&gt;&lt;code&gt;@Leather&lt;/code&gt;&lt;/a&gt;
annotation represents a value for some sort of unnamed key, say,
&lt;code&gt;material&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s so special about a qualifier being an annotation?  Nothing.
Making a qualifier an annotation is an easy way to create an immutable
key value pair, that&amp;rsquo;s all.&lt;/p&gt;
&lt;p&gt;In Jakarta Dependency Injection, a class can be annotated with many
qualifier annotations.  That just means it can have many qualifiers,
i.e. a set of immutable key value pairs.&lt;/p&gt;
&lt;p&gt;Together, a type and qualifiers constitute a path &lt;a href=&#34;https://ljnelson.github.io/blog/paths/&#34;&gt;as we&amp;rsquo;ve defined
it&lt;/a&gt;.  That&amp;rsquo;s interesting.&lt;/p&gt;
&lt;p&gt;That is: in Jakarta Dependency Injection, when you ask for a
conformant system to inject an object, you are asking it to supply you
with an object of a particular type and with particular qualifiers.
The actual machinery that does this isn&amp;rsquo;t concerned with injection at
all.  It&amp;rsquo;s just logically making a &lt;a href=&#34;https://ljnelson.github.io/blog/paths/&#34;&gt;path&lt;/a&gt;
of sorts out of the information you&amp;rsquo;ve supplied (the type and
qualifiers) and satisfying the loading request.&lt;/p&gt;
&lt;p&gt;Hmm, this all &lt;a href=&#34;https://ljnelson.github.io/blog/paths/&#34;&gt;sounds familiar&lt;/a&gt;, doesn&amp;rsquo;t
it?&lt;/p&gt;
&lt;h2 id=&#34;qualifiers-suitability-and-ambiguity&#34;&gt;Qualifiers, Suitability and Ambiguity&lt;/h2&gt;
&lt;p&gt;In fact, the conformant system will frequently not have &lt;em&gt;exactly&lt;/em&gt; the
object you were looking for, but it may have one that is &lt;em&gt;suitable&lt;/em&gt;.
The concepts of qualifiers and suitability are intertwined and we&amp;rsquo;ll
come back to their relationship soon.&lt;/p&gt;
&lt;p&gt;At this point we&amp;rsquo;ve come to realize a few important things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A qualifier is just an additional facet of a load request.&lt;/li&gt;
&lt;li&gt;A qualifier doesn&amp;rsquo;t have to be an annotation.&lt;/li&gt;
&lt;li&gt;Qualifiers have nothing intrinsically to do with dependency
injection.  It&amp;rsquo;s just that JSR-330 happens to have defined the
term.&lt;/li&gt;
&lt;li&gt;In systems that use qualifiers, a request might be fufilled with
something that is exactly what was requested, or something that was
suitable for the request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a dependency injection system, ambiguity is the enemy.  Sometimes a
load request will exactly identify one object.  In that case, the
dependency injection system satisfies the load request and everything
is great.  Sometimes a load request, however, will identify two
different objects that are both suitable.  The dependency injection in
this case normally fails the request and reports that there was
ambiguity.&lt;/p&gt;
&lt;p&gt;In a configuration system, ambiguity is not necessarily the enemy.
Frequently there are suitable values that get ranked or prioritized or
stacked or otherwise arranged so that you always get &lt;em&gt;something&lt;/em&gt; if at
all possible.  This is largely because configuration, unlike business
objectspace, describes many different environments.&lt;/p&gt;
&lt;p&gt;But apart from the ambiguity angle, &lt;strong&gt;a configuration system is just a
dependency injection system without the injection part&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s come back to ambiguity and qualifiers and suitability.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say I ask for a &lt;code&gt;String&lt;/code&gt; under the name &lt;code&gt;hostname&lt;/code&gt;.  As we&amp;rsquo;ve
&lt;a href=&#34;https://ljnelson.github.io/blog/paths/&#34;&gt;seen&lt;/a&gt;, a path can be reduced to a set of
qualifiers, so this could be represented in notation I just made up
like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{ name = hostname, type = java.lang.String }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s actually refine this.  Let&amp;rsquo;s say that I still ask for a &lt;code&gt;String&lt;/code&gt;
under the name &lt;code&gt;hostname&lt;/code&gt;, but somehow the fact that my class that is
doing this is in an application that is running in the test
environment gets captured.  That might look like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{ name = hostname, type = java.lang.String, env = test }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s refine this again.  Let&amp;rsquo;s say that I still ask for a &lt;code&gt;String&lt;/code&gt;
under the name &lt;code&gt;hostname&lt;/code&gt;, but somehow the fact that my class that is
doing this is in an application that is not only running in the test
environment but also in the west region:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{ name = hostname, type = java.lang.String, env = test, region = west }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s further suppose that the loading system doesn&amp;rsquo;t actually have a
value that exactly matches all this.  Let&amp;rsquo;s say that it can furnish a
value whose &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;java.lang.String&lt;/code&gt;, whose &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;hostname&lt;/code&gt;
and whose &lt;code&gt;region&lt;/code&gt; is &lt;code&gt;west&lt;/code&gt; (note: no &lt;code&gt;env&lt;/code&gt; setting).  Should this
value &amp;ldquo;match&amp;rdquo; or not?  Is this value suitable, in other words?&lt;/p&gt;
&lt;p&gt;Or: given a request path of &lt;code&gt;{ name = hostname, type = java.lang.String, env = test, region = west }&lt;/code&gt;, does a value path of
&lt;code&gt;{ name = hostname, type = java.lang.String, region = west }&lt;/code&gt; match?
Is it suitable?&lt;/p&gt;
&lt;p&gt;In a dependency injection system like CDI, the answer is no: the
injection point‚Äîthe request path‚Äîdoes not have a
subset of the qualifiers of the proposed value.  Game over.&lt;/p&gt;
&lt;p&gt;But there is a sense in configuration land that we &lt;em&gt;do&lt;/em&gt; want this
value to be suitable.  It&amp;rsquo;s not &lt;em&gt;maximally&lt;/em&gt; suitable, since it doesn&amp;rsquo;t
exactly match all the qualifiers, but it doesn&amp;rsquo;t redefine any of them
(i.e. the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt; qualifiers all have the same
values as those of the request).&lt;/p&gt;
&lt;h2 id=&#34;qualifiers-and-just-enough-set-theory&#34;&gt;Qualifiers and Just Enough Set Theory&lt;/h2&gt;
&lt;p&gt;If we try to translate this intuitive sense into something a little
more concrete, it becomes clear that, for a given key, a set of
qualifiers that omits that key is &lt;em&gt;suitable&lt;/em&gt; for a set of qualifiers
that specifies that key.  But a set of qualifiers that has a different
value for that key is not suitable.&lt;/p&gt;
&lt;p&gt;It also turns out that if a set of qualifiers has keys in it that are
not present in a requested set of qualifiers, that&amp;rsquo;s suitable too,
though maybe not as suitable as we&amp;rsquo;d like.&lt;/p&gt;
&lt;p&gt;From this we know that a model of qualifiers will need to be able to
report the &lt;em&gt;intersection&lt;/em&gt; between two sets of qualifiers: the key
value pairs they have in common.  And we know that this model will
need to be able to report the &lt;em&gt;symmetric difference&lt;/em&gt; between two sets
of qualifiers: the key value pairs that are contained in one but not
the other.&lt;/p&gt;
&lt;p&gt;Finally, given that qualifiers are likely to be represented
persistently, a set of qualifiers must have a defined iteration order
so that arbitrary changes in set ordering do not impact suitability
calculations.&lt;/p&gt;
&lt;h2 id=&#34;the-model&#34;&gt;The Model&lt;/h2&gt;
&lt;p&gt;Putting it together, we can therefore say something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Qualifiers&lt;/code&gt; is an immutable set of entries.&lt;/li&gt;
&lt;li&gt;An entry is an immutable pairing of a &lt;code&gt;Comparable&lt;/code&gt; and an immutable
object value.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Qualifiers&lt;/code&gt; can report its size.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Qualifiers&lt;/code&gt; may be empty.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Qualifiers&lt;/code&gt; can report its intersection size with respect to
another &lt;code&gt;Qualifiers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Qualifiers&lt;/code&gt; can report its symmetric difference size with
respect to another &lt;code&gt;Qualifiers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Because of all this, &lt;code&gt;Qualifiers&lt;/code&gt; is a &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/doc-files/ValueBased.html&#34;&gt;value-based
class&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ve now sketched what qualifiers look like, and what a path made up
of them looks like.  We&amp;rsquo;ve also hinted at ambiguity and suitability.
In the next post, we&amp;rsquo;ll look at the notions of determinism, presence
and absence, which are the last foundational pieces to any
configuration system.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paths</title>
      <link>https://ljnelson.github.io/blog/paths/</link>
      <pubDate>Sun, 10 Apr 2022 10:52:18 -0700</pubDate>
      <author>ljnelson@gmail.com (Laird Nelson)</author>
      <guid>https://ljnelson.github.io/blog/paths/</guid>
      <description>&lt;div&gt;
  &lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#paths&#34;&gt;Paths&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;paths&#34;&gt;Paths&lt;/h2&gt;
&lt;p&gt;In this ongoing series related to Java configuration, I&amp;rsquo;ve most
recently covered &lt;a href=&#34;https://ljnelson.github.io/blog/service-loader-requests/&#34;&gt;what it might look like if you had a &lt;code&gt;ServiceLoader&lt;/code&gt;
that could take requests&lt;/a&gt;.  I introduced the notion of a &lt;em&gt;path&lt;/em&gt;, a sparsely populated
pointer of sorts to objects in objectspace.  Paths are not new, of
course, and are present in everything from filesystems to JNDI to
Jakarta RESTful Web Services.&lt;/p&gt;
&lt;p&gt;In this post I&amp;rsquo;d like to dive a little deeper into how a path might be
put together.&lt;/p&gt;
&lt;p&gt;A path is used for addressing, so we want it to be as specific as we
can possibly get it.  What does that mean?&lt;/p&gt;
&lt;p&gt;Many times when we think about paths we think of them as if they were
simply names.  Their elements, in this model, are simple strings, and
they are separated by some kind of a separator, and that&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t nearly enough for a configuration system addressing
scheme.  Weirdly, several different configuration systems take this
approach, and it is exactly &lt;em&gt;because&lt;/em&gt; they take this approach that
they are deficient.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look back at JNDI again.  While JNDI paths consist of name
elements in a sequence, each element also has an
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Context.html#getEnvironment()&#34;&gt;environment&lt;/a&gt;.
An environment in this system is just a bunch of key value pairs that
&amp;ldquo;ride with&amp;rdquo; the path element (named &lt;code&gt;Context&lt;/code&gt; in JNDI).&lt;/p&gt;
&lt;p&gt;Or let&amp;rsquo;s look at Jakarta RESTful Web Services again.  While paths
there also consist of elements in a sequence, there are also headers
and matrix parameters that might logically belong to each element in
the sequence.  More key value pairs, if you squint in the right way.&lt;/p&gt;
&lt;p&gt;Finally, if you look at all paths in a certain way, you can see that
at their absolute heart they are &lt;em&gt;nothing more than key value pairs
all the way down&lt;/em&gt;.  They aren&amp;rsquo;t &lt;em&gt;represented&lt;/em&gt; this way, of course, but
fundamentally a JNDI &lt;code&gt;Context&lt;/code&gt; with an environment that contains &lt;code&gt;a = b&lt;/code&gt; and that is identified by a name of &lt;code&gt;a/b/c&lt;/code&gt; is really just a
collection of key value pairs that consists of &lt;code&gt;{a = b, name = a/b/c}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This insight is kind of important.  It means that when a loader
receives a request to load an object, it is, at some fundamental
level, receiving an immutable set of key value pairs describing the
request.  Once you see this you can&amp;rsquo;t unsee it, and
names-with-separators addressing schemes just don&amp;rsquo;t measure up.&lt;/p&gt;
&lt;p&gt;It is nevertheless true that some of these key value pairs are often
more important to the human reader than others.  In the case of a JNDI
&lt;code&gt;Context&lt;/code&gt;, the name itself is quite important since you always have to
have one and the way it is represented indicates the depth of a
hierarchy that might or might not be present.  Similarly, in Jakarta
RESTful Web Services, the length of a path often tells you something,
just by looking at it, about the specificity of the request.  So
representing the value of a hypothetical &lt;code&gt;name&lt;/code&gt; key with a value that
is a sequence of names makes some sense.&lt;/p&gt;
&lt;p&gt;(Names, as frequently mentioned on this blog, always have implicit
namespaces, so it&amp;rsquo;s important that paths&amp;rsquo; names be able to be
&lt;em&gt;transliterated&lt;/em&gt;: if you, a class developer, decide that your path is
going to have a name of &lt;code&gt;a/b&lt;/code&gt;, and I, an application assembler, know
that &lt;code&gt;a/b&lt;/code&gt; is already spoken for by another class developer, then I
have to have a way to reconcile this name clash.)&lt;/p&gt;
&lt;p&gt;Similarly, there are plenty of implicit key value pairs that are part
of a path even when the path builder doesn&amp;rsquo;t supply them explicitly.
For example, the current &lt;code&gt;Locale&lt;/code&gt; or operating system might very well
be a key whose value might help a loader find an appropriate object.
Frequently these sorts of situational parameter values are not
explicitly supplied by a user, but are understood nevertheless to be
part of the loading request.  Making these of secondary concern seems
like a good thing to do.&lt;/p&gt;
&lt;p&gt;Finally, paths in all systems that use them have an implicit or
explicit &lt;em&gt;type&lt;/em&gt;.  A filesystem path ends in a type
(e.g. &lt;code&gt;java.io.File&lt;/code&gt; or &lt;code&gt;java.nio.file.Path&lt;/code&gt;).  A JNDI &lt;code&gt;Name&lt;/code&gt; ends in
a type, but Java lacked the syntax to fully describe it; you can see
the footprints in the
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/NameClassPair.html&#34;&gt;&lt;code&gt;NameClassPair&lt;/code&gt;&lt;/a&gt;
class.  A Jakarta RESTful Web Services path (of type &lt;code&gt;GET&lt;/code&gt; (oh look,
another key value pair that rides with the request!)) terminates in an
entity of a particular type.  The type is, of course, just another key
value pair, logically speaking (&lt;code&gt;type = java.nio.file.Path&lt;/code&gt;), but is
also a key value pair that is borne by all paths.  So it might make
sense to represent it explicitly and elevate its primacy.&lt;/p&gt;
&lt;p&gt;When we put this all together we get something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Path&lt;/code&gt; is a sequence of &lt;code&gt;Path.Element&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Path&lt;/code&gt; has &lt;code&gt;Qualifiers&lt;/code&gt; that are the key value pairs that qualify
it.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Path&lt;/code&gt;&amp;rsquo;s final &lt;code&gt;Path.Element&lt;/code&gt; has a type, which is also the type
of the &lt;code&gt;Path&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Other &lt;code&gt;Path.Element&lt;/code&gt;s need not have a type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;Path.Element&lt;/code&gt; has a name.
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Path.Element&lt;/code&gt; must be able to be transliterated without
changing source code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;Path.Element&lt;/code&gt; has &lt;code&gt;Qualifiers&lt;/code&gt; that qualify it and no other
&lt;code&gt;Path.Element&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any given &lt;code&gt;Path.Element&lt;/code&gt; may or may not have a type, but a
&lt;code&gt;Path.Element&lt;/code&gt; that ends a &lt;code&gt;Path&lt;/code&gt; must have a type.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Path&lt;/code&gt;&amp;rsquo;s &lt;code&gt;Qualifiers&lt;/code&gt; includes qualifiers that qualify the path
as a whole as well as the appropriately-scoped &lt;code&gt;Qualifiers&lt;/code&gt; from
each of its &lt;code&gt;Path.Element&lt;/code&gt;s.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that each &lt;code&gt;Path.Element&lt;/code&gt; in the model described above does not
have a type (paths can be sparsely populated).  So this does not
imply any kind of hierarchy, nor should it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve quietly introduced the notion of a &lt;code&gt;Qualifiers&lt;/code&gt;, which is
basically a read-only set of immutable key value pairs with a defined
iteration order.  A &lt;code&gt;Qualifiers&lt;/code&gt; may be empty.&lt;/p&gt;
&lt;p&gt;Again, just for the thought experiment, it&amp;rsquo;s worth remembering that a
&lt;code&gt;Path&lt;/code&gt; could be fully represented as a &lt;code&gt;Map&lt;/code&gt; with required &lt;code&gt;name&lt;/code&gt; and
&lt;code&gt;type&lt;/code&gt; keys that have non-&lt;code&gt;null&lt;/code&gt; values.  But for the reasons listed
above it&amp;rsquo;s better to represent it as its own thing.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;m proposing to build &lt;code&gt;Path&lt;/code&gt;s around &lt;code&gt;Qualifiers&lt;/code&gt;, the next
post will dive into them a little more deeply.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Loader Requests</title>
      <link>https://ljnelson.github.io/blog/service-loader-requests/</link>
      <pubDate>Fri, 28 Jan 2022 14:52:27 -0800</pubDate>
      <author>ljnelson@gmail.com (Laird Nelson)</author>
      <guid>https://ljnelson.github.io/blog/service-loader-requests/</guid>
      <description>&lt;div&gt;
  &lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#what-would-a-serviceloader-that-could-take-requests-look-like&#34;&gt;What Would a &lt;code&gt;ServiceLoader&lt;/code&gt; That Could Take Requests Look Like?&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#objectspace&#34;&gt;Objectspace&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#ambiguity&#34;&gt;Ambiguity&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#addressing&#34;&gt;Addressing&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#serviceloader-addressing&#34;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt; Addressing&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#jakarta-restful-web-services-addressing&#34;&gt;Jakarta RESTful Web Services Addressing&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#jndi-addressing&#34;&gt;JNDI Addressing&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#loaders-paths-and-qualifiers&#34;&gt;Loaders, Paths and Qualifiers&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;what-would-a-serviceloader-that-could-take-requests-look-like&#34;&gt;What Would a &lt;code&gt;ServiceLoader&lt;/code&gt; That Could Take Requests Look Like?&lt;/h2&gt;
&lt;p&gt;In this ongoing series related to Java configuration, I&amp;rsquo;ve covered
&lt;a href=&#34;https://ljnelson.github.io/blog/java-configuration-jndi-and-naming-operations/&#34;&gt;JNDI&lt;/a&gt;
and &lt;a href=&#34;https://ljnelson.github.io/blog/java-configuration-jaxrs-as-a-configuration-system/&#34;&gt;Jakarta RESTful Web Services&lt;/a&gt;.  Both
involve loading Java &lt;code&gt;Object&lt;/code&gt;s from potentially many providers with
disambiguation algorithms built in, and both permit the application
assembler to work around naming clashes.  Of course, neither is a Java
configuration system.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at some of the super-concepts these two technologies have
in common.&lt;/p&gt;
&lt;h3 id=&#34;objectspace&#34;&gt;Objectspace&lt;/h3&gt;
&lt;p&gt;The first is what I&amp;rsquo;ll call, somewhat pretentiously, &lt;em&gt;objectspace&lt;/em&gt;.
This is the notional space of all possible Java objects (and
primitive types) in all possible Java virtual machines in all possible
worlds.  Objectspace is big.&lt;/p&gt;
&lt;p&gt;You can pick out an individual object from objectspace, let&amp;rsquo;s say, by
supplying some &lt;em&gt;loading system&lt;/em&gt; with an &lt;em&gt;address&lt;/em&gt;.  (This sounds like
pointers!  Indeed, that&amp;rsquo;s part of the analogy I&amp;rsquo;m going for.)  Give
the system an address, it hands you back the corresponding object.  By
definition, if you provide a precise enough address there will be
exactly one object it picks out, never zero.  Simple.  What could
possibly go wrong?&lt;/p&gt;
&lt;p&gt;To get an object from objectspace according to the rules as I&amp;rsquo;ve laid
them out so far, you have to be &lt;em&gt;remarkably&lt;/em&gt; precise.  You&amp;rsquo;d better be
able to distinguish objects by type, certainly, and whatever the
addressing scheme looks like, it better take type into account.  But
you can&amp;rsquo;t stop there.&lt;/p&gt;
&lt;h3 id=&#34;ambiguity&#34;&gt;Ambiguity&lt;/h3&gt;
&lt;p&gt;If we &lt;em&gt;do&lt;/em&gt; stop there, we have to address ambiguity.  If I ask for
what I hope is the only &lt;code&gt;String&lt;/code&gt; in all of objectspace by asking a
hypothetical loading system for the one true object that has the type
&lt;code&gt;String.class&lt;/code&gt;, the loading system will laugh in my face.  There are
many &lt;code&gt;String&lt;/code&gt;s in objectspace.&lt;/p&gt;
&lt;p&gt;OK, OK; I might instead want to ask this hypothetical loading system
for a very particular &lt;code&gt;String&lt;/code&gt;, namely the one in objectspace under
the System property key &lt;code&gt;java.home&lt;/code&gt;.  But even this isn&amp;rsquo;t specific
enough, since, remember, objectspace encompasses all Java objects in
the universe.  There are many Java homes.  The one that identifies
&lt;em&gt;my&lt;/em&gt; Java installation is just one of them!  And yet I get a single
&lt;code&gt;String&lt;/code&gt; back, so, Laird, your analogy sucks.&lt;/p&gt;
&lt;h3 id=&#34;addressing&#34;&gt;Addressing&lt;/h3&gt;
&lt;p&gt;Not so fast!  When I ask for this hypothetical loading system to give
me the &lt;code&gt;java.home&lt;/code&gt; &lt;code&gt;String&lt;/code&gt;, I&amp;rsquo;m actually supplying plenty of other
implicit addressing information in my request, whether I know I&amp;rsquo;m
doing this or not.  Specifically, I&amp;rsquo;m &lt;em&gt;actually&lt;/em&gt; asking for the only
&lt;code&gt;String&lt;/code&gt; in all of objectspace that has the type &lt;code&gt;String.class&lt;/code&gt;, that
is indexed under the System property key &lt;code&gt;java.home&lt;/code&gt;, and on this JVM,
running on this machine, on this architecture, in this universe, and
so on and so forth.  That &lt;em&gt;may&lt;/em&gt; be enough to pick out the &lt;code&gt;String&lt;/code&gt; I
want (and normally is in non-hypothetical, non-abstract,
non-&lt;a href=&#34;https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/&#34;&gt;architecture
astronaut&lt;/a&gt;
cases).&lt;/p&gt;
&lt;p&gt;So types and JVM-wide names seem to be the bare minimum to pick out an
object from all of objectspace.  Sounds easy‚Äîbut that&amp;rsquo;s not quite
right either.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say instead that I would like this loading system to fetch me
the one true &lt;code&gt;String&lt;/code&gt; that can be found in some hazy way &amp;ldquo;under&amp;rdquo; the
name &lt;code&gt;preferredHost&lt;/code&gt; (I made this up so that it&amp;rsquo;s not some key defined
by Java itself).  Let&amp;rsquo;s further wave our hands about possible name
collisions: let&amp;rsquo;s pretend that no other developer in the entire
universe could possibly ever be writing a class like mine, and no
other developer in the entire universe could possibly ever mean
anything semantically different from what I mean when I say
&lt;code&gt;preferredHost&lt;/code&gt;.  (In practice, of course, these assumptions are
completely ridiculous.  Bear with me; we&amp;rsquo;ll get there.)&lt;/p&gt;
&lt;p&gt;But if my application is running in &lt;code&gt;test&lt;/code&gt;, in some sort of hazy way,
then there may very well be an ambiguity here.  &lt;code&gt;preferredHost&lt;/code&gt; and
&lt;code&gt;String.class&lt;/code&gt; no longer uniquely identify a &lt;code&gt;String&lt;/code&gt; in objectspace.
Maybe there is another string value indexed under &lt;code&gt;preferredHost&lt;/code&gt; in
objectspace (that identifies the &lt;code&gt;production&lt;/code&gt; &lt;code&gt;preferredHost&lt;/code&gt; for
example).  Oh, shoot, I guess really what I was asking for all along
was the one true &lt;code&gt;String&lt;/code&gt; indexed under the explicit name
&lt;code&gt;preferredHost&lt;/code&gt; and the implicit name &lt;code&gt;test&lt;/code&gt;.  (Note that in no way
was I asking for the explicit name &lt;code&gt;test.preferredHost&lt;/code&gt;, nor did I
have some kind of fallback in mind.)  As a component developer, I of
course didn&amp;rsquo;t know what application my component was running in, so it
didn&amp;rsquo;t occur to me to check for this case.  Oops.&lt;/p&gt;
&lt;p&gt;Objectspace is &lt;em&gt;big&lt;/em&gt;.  Like, &lt;a href=&#34;https://www.goodreads.com/quotes/14434-space-is-big-you-just-won-t-believe-how-vastly-hugely&#34;&gt;you just won&amp;rsquo;t believe how vastly,
hugely, mind-bogglingly big it
is&lt;/a&gt;.
Picking out a single &lt;code&gt;Object&lt;/code&gt; in it is damn near impossible.&lt;/p&gt;
&lt;p&gt;Instead, typically what we do, while blissfully not being aware of it,
is: we supply &lt;em&gt;some&lt;/em&gt; addressing information, and then rely on some
common case where we were expecting one thing, and there was only one
thing that happened to match our imprecise addressing information, and
we asked our loading system for it, and it responded, and we got only
one thing, not 27, and it never occurs to us that 27 of those things
is actually a very real possibility.  Then the bugs roll in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good loading system APIs recognize that no addressing system you can
come up with will ever pick out an object from objectspace without
some kind of further disambiguation.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;serviceloader-addressing&#34;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt; Addressing&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s look at
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ServiceLoader.html&#34;&gt;&lt;code&gt;java.util.ServiceLoader&lt;/code&gt;&lt;/a&gt;
as an example.  This class deliberately embraces ambiguity.  The only
kind of addressing information you can give it is type.  Ask a
&lt;code&gt;ServiceLoader&lt;/code&gt; for the thing corresponding to &lt;code&gt;SomeService.class&lt;/code&gt;,
and it will hand you back an &lt;code&gt;Iterable&amp;lt;SomeService&amp;gt;&lt;/code&gt;.  Anyone can put
a service provider file on the classpath (discoverable as a classpath
resource at &lt;code&gt;META-INF/services/com.foo.SomeService&lt;/code&gt;, let&amp;rsquo;s say), and
its entries will be picked up.  So great, how do you filter all the
various &lt;code&gt;SomeService&lt;/code&gt; implementors?  That, dear reader, is up to you.&lt;/p&gt;
&lt;p&gt;The upshot is: &lt;code&gt;ServiceLoader&lt;/code&gt;, like many loading systems, accounts
for the almost completely necessary ambiguity of objectspace in its
API design.  Ask for a thing of a type, get back many things of that
type.  Your problem to solve.&lt;/p&gt;
&lt;h4 id=&#34;jakarta-restful-web-services-addressing&#34;&gt;Jakarta RESTful Web Services Addressing&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s consider Jakarta RESTful Web Services.  Let&amp;rsquo;s pretend that
Jakarta RESTful Web Services is, among other things, a way to (again,
partially) address into objectspace.  After all, with a resource
method you can say, effectively, &amp;ldquo;this method will return a
&lt;code&gt;SomeService&lt;/code&gt; if the addressing information matches the path &lt;code&gt;a/b/c&lt;/code&gt;
and the media type &lt;code&gt;application/json&lt;/code&gt;.&amp;rdquo;.  So if you ask &lt;em&gt;this&lt;/em&gt; loading
system for a &lt;code&gt;SomeService.class&lt;/code&gt; object, providing no path information
and no media type information, the ambiguity is reduced somewhat: this
resource method I described will not &amp;ldquo;fire&amp;rdquo; and it, at least, will not
be responsible for returning a &lt;code&gt;SomeService&lt;/code&gt;.  Some other resource
method might.  If more than one &amp;ldquo;fires&amp;rdquo;, then there is an algorithm
that somewhat arbitrarily picks one.&lt;/p&gt;
&lt;h4 id=&#34;jndi-addressing&#34;&gt;JNDI Addressing&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s consider JNDI.  Let&amp;rsquo;s pretend that JNDI is, among other things,
a way to (again, partially) address into objectspace.  After all, with
a
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/spi/ObjectFactory.html&#34;&gt;&lt;code&gt;javax.naming.spi.ObjectFactory&lt;/code&gt;&lt;/a&gt;
you can say, effectively, &amp;ldquo;this &lt;code&gt;ObjectFactory&lt;/code&gt; will return a
&lt;code&gt;SomeService&lt;/code&gt; if the addressing information matches the &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/CompoundName.html&#34;&gt;compound
name&lt;/a&gt;
&lt;code&gt;a/b/c&lt;/code&gt; and an expected
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/spi/ObjectFactory.html#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)&#34;&gt;&lt;code&gt;environment&lt;/code&gt;&lt;/a&gt;.&amp;rdquo;
So if you ask &lt;em&gt;this&lt;/em&gt; loading system for a &lt;code&gt;SomeService.class&lt;/code&gt; object,
providing no compound name information and no environment information,
the ambiguity is reduced somewhat: this &lt;code&gt;ObjectFactory&lt;/code&gt; I described
will not &amp;ldquo;fire&amp;rdquo; and it, at least, will not be responsible for
returning a &lt;code&gt;SomeService&lt;/code&gt;.  Some other &lt;code&gt;ObjectFactory&lt;/code&gt; might.  If more
than one &amp;ldquo;fires&amp;rdquo;, then there is an algorithm that somewhat arbitrarily
picks one.&lt;/p&gt;
&lt;p&gt;(You of course see the similarity.)&lt;/p&gt;
&lt;p&gt;Each of these loading systems differs, of course, in what its
&amp;ldquo;loaders&amp;rdquo; are permitted to do (resource methods and &lt;code&gt;ObjectFactory&lt;/code&gt;
instances have to play by the rules of their specifications).  And
each loading system permits more or less addressing information to
&amp;ldquo;ride along&amp;rdquo; with the general request for a typed Java &lt;code&gt;Object&lt;/code&gt; from
objectspace, to help pare down the possible matching objects to a
manageable number.  But they&amp;rsquo;re very similar when we look at them as
object loading systems that accept reasonably fine-grained addressing
information that identifies many things, but hopefully not lots of
things.&lt;/p&gt;
&lt;p&gt;Finally, each of these systems is not a Java configuration system!
But you know what is a configuration system, of a sort?
&lt;code&gt;java.util.ServiceLoader&lt;/code&gt;.  It is a configuration system that just so
happens to have punted the problem of resolving ambiguity to the end
user.  It is also designed to satisfy only one of several
configuration-related use cases, which it does very well.  What if we
augmented &lt;code&gt;ServiceLoader&lt;/code&gt; with the ability to receive some kind of
addressing information that would allow it to avoid ambiguity in more
cases than it does right now?  What would we need to add?&lt;/p&gt;
&lt;h3 id=&#34;loaders-paths-and-qualifiers&#34;&gt;Loaders, Paths and Qualifiers&lt;/h3&gt;
&lt;p&gt;First, let&amp;rsquo;s talk terminology.  A configuration system doesn&amp;rsquo;t just
load services, so we&amp;rsquo;ll drop that word.  So &lt;code&gt;ServiceLoader&lt;/code&gt; will
become &lt;code&gt;Loader&lt;/code&gt; for this discussion, and &amp;ldquo;service provider&amp;rdquo; will
become &amp;ldquo;provider&amp;rdquo;, and so on.&lt;/p&gt;
&lt;p&gt;Next, we need a good word for our addressing information.  We can look
to JNDI and Jakarta RESTful web services here.  In JNDI, the
addressing information is termed a &lt;em&gt;name&lt;/em&gt;.  In Jakarta RESTful Web
Services, the addressing information is termed a &lt;em&gt;path&lt;/em&gt; (since of
course it is concerned with URIs).  I like &lt;em&gt;path&lt;/em&gt; better than &lt;em&gt;name&lt;/em&gt;
for addressing information because it implies a type (a filesystem
path yields a file, for example; a Jakarta RESTful Web Services path
yields an object of a particular media type) and can either imply a
tree structure or not, depending on how it&amp;rsquo;s used.  It&amp;rsquo;s also about
finding your way to a destination.  So we&amp;rsquo;ll go with path.&lt;/p&gt;
&lt;p&gt;The kind of path we&amp;rsquo;ll talk about is similar to Jakarta RESTful Web
Services&amp;rsquo; path: it is sparse.  That is, it&amp;rsquo;s not the case that every
element in a path necessarily identifies an object at that location
(in direct contrast with JNDI, where every atomic name in a compound
name identifies a context).  In this regard, a path is like a pointer
or a probe: ultimately what matters is what it picks out at the end,
not the intermediate objects that may exist along the way.&lt;/p&gt;
&lt;p&gt;Our path will also need to have the ability to pass additional
addressing information.  JNDI has &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Context.html#:~:text=provider%20may%20not.-,Environment%20Properties,-JNDI%20applications%20need&#34;&gt;environment
properties&lt;/a&gt;.
Jakarta RESTful Web Services provides resource methods with the
ability to inspect headers, query string parameters, path parameters
and matrix parameters.  Each of these facilities is a way to further
&lt;em&gt;qualify&lt;/em&gt; a request.  We&amp;rsquo;ll consequently follow in the &lt;a href=&#34;https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#qualifiers&#34;&gt;terminological
footsteps of systems like
CDI&lt;/a&gt;
and call this additional addressing information &lt;em&gt;qualifiers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Putting it all together, a &lt;em&gt;path&lt;/em&gt; is a &lt;em&gt;typed&lt;/em&gt; and &lt;em&gt;qualified&lt;/em&gt;
ordered sequence of &lt;em&gt;elements&lt;/em&gt; that identifies zero or more objects in
objectspace.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A &lt;em&gt;loader&lt;/em&gt; is a component that dereferences a path.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you look at things this way, then a &lt;code&gt;java.util.ServiceLoader&lt;/code&gt; is a
loader that dereferences very particular kinds of paths, namely those
that have a type, zero elements and no qualifiers.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re on our way, but we&amp;rsquo;re not there yet.  What lies at the end of
any path is not necessarily an object, but may be nothing or many
objects.  Also, since in the real world the objectspace we&amp;rsquo;re dealing
with at any given time in any given system is actually fairly small
and sparsely populated, we might want a strategy for what to do when a
path doesn&amp;rsquo;t actually identify anything but something else might be
&lt;em&gt;suitable&lt;/em&gt; for it.&lt;/p&gt;
&lt;p&gt;Additionally, even if a path &lt;em&gt;does&lt;/em&gt; identify something, it may come
and go over time, being &lt;em&gt;temporarily&lt;/em&gt; or &lt;em&gt;permanently&lt;/em&gt; &lt;em&gt;absent&lt;/em&gt; or
&lt;em&gt;present&lt;/em&gt;.  What our loader loads may therefore need to be not the
object itself, but some kind of dereferencer that is pinned to the
path that yielded it.&lt;/p&gt;
&lt;p&gt;There is also the notion of an application&amp;rsquo;s &lt;em&gt;environment&lt;/em&gt; to be
concerned with.  An application&amp;rsquo;s environment is the portion of
objectspace it inhabits (the machine it lives on, the locale it&amp;rsquo;s in,
various other automatic and implicit coordinates, and the
human-authored configuration that is suitable for it), which includes
parts that a &lt;em&gt;component&lt;/em&gt; of that application, asking for an object to
be loaded, is unaware of, but that are necessary to include with the
addressing information.  Other environments within objectspace may or
may not be suitable for a loader to consider when trying to
dereference a path.&lt;/p&gt;
&lt;p&gt;The journey continues; stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Configuration: JAX-RS as a Configuration System</title>
      <link>https://ljnelson.github.io/blog/java-configuration-jaxrs-as-a-configuration-system/</link>
      <pubDate>Sat, 01 Jan 2022 12:45:33 -0800</pubDate>
      <author>ljnelson@gmail.com (Laird Nelson)</author>
      <guid>https://ljnelson.github.io/blog/java-configuration-jaxrs-as-a-configuration-system/</guid>
      <description>&lt;div&gt;
  &lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#background-and-rationale&#34;&gt;Background and Rationale&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#jakarta-rest-as-a-configuration-system&#34;&gt;Jakarta REST as a Configuration System?!&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-foundation&#34;&gt;The Foundation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#configuration-concerns&#34;&gt;Configuration Concerns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#disambiguation&#34;&gt;Disambiguation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#suitability&#34;&gt;Suitability&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;background-and-rationale&#34;&gt;Background and Rationale&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve &lt;a href=&#34;https://ljnelson.github.io/blog/java-configuration-jndi-and-naming-operations/&#34;&gt;written previously&lt;/a&gt; about looking at
JNDI through a Java-centric configuration system design lens.  Here
I&amp;rsquo;ll do something similar with the JAX-RS specification (now known as
{deep breath} &lt;a href=&#34;https://jakarta.ee/specifications/restful-ws/3.0/&#34;&gt;Jakarta RESTful Web
Services&lt;/a&gt;, or,
hopefully soon, simply Jakarta REST, which is how I&amp;rsquo;ll refer to it in
this article).&lt;/p&gt;
&lt;h2 id=&#34;jakarta-rest-as-a-configuration-system&#34;&gt;Jakarta REST as a Configuration System?!&lt;/h2&gt;
&lt;p&gt;Hear me out.&lt;/p&gt;
&lt;p&gt;First, I&amp;rsquo;m not &lt;em&gt;actually&lt;/em&gt; proposing that if you want a configuration
framework in your Java program you should grab a Jakarta REST
implementation and go to town.&lt;/p&gt;
&lt;p&gt;But I &lt;em&gt;am&lt;/em&gt; looking at it as primarily a &lt;em&gt;Java&lt;/em&gt; framework, and not as
something that is web-oriented.  After all, one of its founding goals
was to make it easy to use plain old Java objects (POJOs) to model
representational state transfers.  Who really cares if there is a
network involved or not?&lt;/p&gt;
&lt;h2 id=&#34;the-foundation&#34;&gt;The Foundation&lt;/h2&gt;
&lt;p&gt;Jakarta REST is built atop &lt;em&gt;resource classes&lt;/em&gt;.  While you should of
course consult &lt;a href=&#34;https://jakarta.ee/specifications/restful-ws/3.0/jakarta-restful-ws-spec-3.0.html#resource-classes&#34;&gt;the
specification&lt;/a&gt;
for the official definition of resource classes (and anything else I&amp;rsquo;m
going to wave my hands about in this article), the general gist is: a
resource class is a POJO class with some specifically shaped methods
in it, and annotated in a particular way.&lt;/p&gt;
&lt;p&gt;For retrieval purposes (&lt;code&gt;GET&lt;/code&gt;), which is all I&amp;rsquo;m interested in,
methods that do retrievals obviously need to have a return type.  The
return type can be Jakarta-REST-specific
(&lt;a href=&#34;https://jakarta.ee/specifications/restful-ws/3.0/apidocs/jakarta/ws/rs/core/response&#34;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;),
or can be a POJO designed by the resource class designer.&lt;/p&gt;
&lt;p&gt;The annotations on resource classes and their methods help them
declare what &lt;em&gt;paths&lt;/em&gt; they respond to, and what types of objects those
methods supply in response.&lt;/p&gt;
&lt;p&gt;When you put this all together, you have a subsystem that receives a
typed path, finds a relevant supplier (a resource method), caches that
fact, and then uses that supplier to serve up an &lt;code&gt;Object&lt;/code&gt; of some kind
that corresponds to that path (and other qualifiers).&lt;/p&gt;
&lt;h2 id=&#34;configuration-concerns&#34;&gt;Configuration Concerns&lt;/h2&gt;
&lt;p&gt;When you look at Jakarta REST this way, it starts to look an awful lot
like &lt;a href=&#34;https://ljnelson.github.io/blog/java-configuration-jndi-and-naming-operations/&#34;&gt;some of the JNDI concepts I&amp;rsquo;ve written about previously&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In both cases there is a lookup operation, with name-like structures
identifying the thing to retrieve.  In both cases (although in JNDI
it&amp;rsquo;s a pain in the neck) you can qualify your lookup.  In both cases
an &lt;em&gt;application assembler&lt;/em&gt; can declare explicitly how bundles of
components should be combined into an application in such a way that
naming conflicts do not occur.  In both cases, &lt;em&gt;how&lt;/em&gt; a resulting
&lt;code&gt;Object&lt;/code&gt; is put together, or found, or synthesized, is completely
transparent to the caller and is deliberately unspecified.&lt;/p&gt;
&lt;p&gt;Jakarta REST also features a wealth of additional qualifiers that ride
along with every request.  You have the path, of course, but you also
have headers (key/value pairs), MIME types, and request-level content
negotiation strategies.  If you look at these coarsely enough, they&amp;rsquo;re
just qualifiers further picking out the &lt;code&gt;Object&lt;/code&gt; that is being
requested.&lt;/p&gt;
&lt;p&gt;One of the nice things about the lookup request format that Jakarta
REST uses is that in a &lt;code&gt;path/with/many/components&lt;/code&gt; there is no
presumption that each component in the path designates a retrievable
resource.  (JNDI, by contrast, basically requires that a &lt;code&gt;Context&lt;/code&gt;
exist at each juncture.)  This allows for sparse graphs of resources,
dynamic subresources, and all sorts of other interesting bits that end
up being directly relevant to configuration systems.&lt;/p&gt;
&lt;p&gt;Another nice thing about the lookup request format is that the
incoming name-like structure (the request) consists not just of the
name-like thing (the path) plus its qualifiers (the headers and matrix
parameters and everything else) but also the &lt;em&gt;type&lt;/em&gt; of the object
being requested (expressed as a MIME type).  In my &lt;a href=&#34;https://ljnelson.github.io/blog/java-configuration-jndi-and-naming-operations/&#34;&gt;earlier JNDI
article&lt;/a&gt;, I noted that configuration systems involve a &lt;em&gt;typed path&lt;/em&gt; at the
heart of configuration lookup.  JNDI sort of lets you get there, but
it is awful and clunky to do.  Jakarta REST makes it reasonably easy:
by the time a resource method gets invoked, you know that MIME type
matching has already occurred according to a well-specified algorithm,
so you know that the resource method in question is equipped to
service the request.&lt;/p&gt;
&lt;h2 id=&#34;disambiguation&#34;&gt;Disambiguation&lt;/h2&gt;
&lt;p&gt;Thankfully, the designers of Jakarta REST (well, JAX-RS, in this case)
also realized the namespace issues that always show up when you talk
about someone assembling components together into an application, and
provided for their solution.&lt;/p&gt;
&lt;p&gt;In JNDI, namespace issues are somewhat moot, because names are always
relative to a &lt;code&gt;Context&lt;/code&gt;: there&amp;rsquo;s no such thing as an absolute name.
The same is not true in Jakarta REST, but the application assembler
can explicitly designate an &lt;code&gt;Application&lt;/code&gt; implementation that says for
certain which Java classes are to be considered resource classes, and
which are not.  This allows two resource methods, for example, from
two different sources, annotated with the same &lt;code&gt;@Path&lt;/code&gt; annotation, to
coexist: the application assembler can choose just one, can wrap the
other, or any of a variety of other strategies at assembly time to
resolve the ambiguity.&lt;/p&gt;
&lt;p&gt;(It&amp;rsquo;s worth noting that no Java-centric configuration system that I&amp;rsquo;m
aware of lets you do this fundamental disambiguation operation at
assembly time.  That&amp;rsquo;s really odd.)&lt;/p&gt;
&lt;h2 id=&#34;suitability&#34;&gt;Suitability&lt;/h2&gt;
&lt;p&gt;Probably the most interesting feature of Jakarta REST when looked at
through a Java-centric configuration lens is its built-in notion of
suitability.&lt;/p&gt;
&lt;p&gt;A resource method is more or less suitable for a given request as
specified by an &lt;a href=&#34;https://jakarta.ee/specifications/restful-ws/3.0/jakarta-restful-ws-spec-3.0.html#mapping_requests_to_java_methods&#34;&gt;exceedingly well-defined
algorithm&lt;/a&gt;.
For my purposes, the exact steps of the algorithm are unimportant.
The fact that it exists and is defined in terms of &lt;em&gt;application-level&lt;/em&gt;
concerns, rather than &lt;em&gt;component-level&lt;/em&gt; concerns is what is important.
If this algorithm completes and there are somehow still two or more
candidate resource methods for a given request, then an error is
thrown.  This means that resource method selection is &lt;em&gt;deterministic&lt;/em&gt;:
if you supply the same inputs, you get the same outputs every time.&lt;/p&gt;
&lt;p&gt;Recognizing the difference between application-level concerns and
component-level concerns is critical for this kind of determinism,
because components are often developed in isolation from one another,
so sharing things like namespaces and numberspaces and pathspaces and
all the rest can be difficult.  So, for example, defining the matching
algorithm in terms of a global set of MIME types means that there can
be no name clashes between types: &lt;code&gt;application/octet-stream&lt;/code&gt; means
what it means, regardless of which component uses it.&lt;/p&gt;
&lt;p&gt;Contrast this with another popular but extraordinarily misguided
strategy of labeling some component somewhere with a numeric priority
and believing erroneously that you have somehow solved the ambiguity
problem.  Instead, you&amp;rsquo;ve just punted it: If component &lt;em&gt;A&lt;/em&gt; and
component &lt;em&gt;B&lt;/em&gt; are developed in isolation, and both have independently
decided to declare that they are of priority &lt;code&gt;10&lt;/code&gt;, that is still a
problem the application assembler has to solve, but unless there is
yet &lt;em&gt;another&lt;/em&gt; mechanism for her to disambiguiate &lt;em&gt;this&lt;/em&gt; ambiguity, it
can lead to a non-deterministic state of affairs.  We see this, &lt;a href=&#34;https://lairdnelson.wordpress.com/2021/10/14/some-of-the-things-i-dont-like-about-microprofile-config/&#34;&gt;as
I&amp;rsquo;ve noted earlier, in MicroProfile
Config&lt;/a&gt;.
(Interestingly, Jakarta REST &lt;a href=&#34;https://jakarta.ee/specifications/restful-ws/3.0/jakarta-restful-ws-spec-3.0.html#provider_priorities&#34;&gt;&lt;em&gt;did&lt;/em&gt; walk into this trap in terms of
providers&lt;/a&gt;
and other accessory entities, but at least they give the application
assembler a welcome &amp;ldquo;out&amp;rdquo; since she can always write an &lt;code&gt;Application&lt;/code&gt;
class to make things more explicit.)&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Jakarta REST is a specification for web services, yes, but it is also
a specification for acquiring Java &lt;code&gt;Object&lt;/code&gt;s given path-like requests,
where the potential suppliers of such &lt;code&gt;Object&lt;/code&gt;s can be more or less
suitable for any given request.  This lines up pretty well with the
requirements of a Java-centric configuration system.  There are
lessons to be learned here that can be applied to the design of a
&amp;ldquo;real&amp;rdquo; Java-centric configuration system.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Configuration: JNDI and Naming Operations</title>
      <link>https://ljnelson.github.io/blog/java-configuration-jndi-and-naming-operations/</link>
      <pubDate>Thu, 30 Dec 2021 16:22:37 -0800</pubDate>
      <author>ljnelson@gmail.com (Laird Nelson)</author>
      <guid>https://ljnelson.github.io/blog/java-configuration-jndi-and-naming-operations/</guid>
      <description>&lt;div&gt;
  &lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#background-and-rationale&#34;&gt;Background and Rationale&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#whats-in-a-naming-service-name&#34;&gt;What&amp;rsquo;s In A (Naming Service) Name?&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#the-object-management-group-naming-service-specification&#34;&gt;The Object Management Group Naming Service Specification&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#jndi&#34;&gt;JNDI&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#bootstrapping&#34;&gt;Bootstrapping&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#retrieval-operations&#34;&gt;Retrieval Operations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#binding-operations&#34;&gt;Binding Operations&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#name-to-object-bindings&#34;&gt;Name-to-&lt;code&gt;Object&lt;/code&gt; Bindings&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#synthesizing-operations&#34;&gt;Synthesizing Operations&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#objectfactory&#34;&gt;&lt;code&gt;ObjectFactory&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#event-operations&#34;&gt;Event Operations&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#putting-it-all-together&#34;&gt;Putting It All Together&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#jndi-flaws&#34;&gt;JNDI Flaws&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#no-generics&#34;&gt;No Generics&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#binding-and-lookup-services-colocated&#34;&gt;Binding and Lookup Services Colocated&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#vague-qualifiers&#34;&gt;Vague Qualifiers&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#too-many-checked-exceptions&#34;&gt;Too Many Checked Exceptions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#cant-use-class-or-type-as-a-selector&#34;&gt;Can&amp;rsquo;t Use &lt;code&gt;Class&lt;/code&gt; or &lt;code&gt;Type&lt;/code&gt; as a Selector&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#strange-service-provider-location-machinery&#34;&gt;Strange Service Provider Location Machinery&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#too-much-hierarchy&#34;&gt;Too Much Hierarchy&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;

&lt;h2 id=&#34;background-and-rationale&#34;&gt;Background and Rationale&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve written
&lt;a href=&#34;https://lairdnelson.wordpress.com/2021/11/07/configuration-and-dependency-acquisition/&#34;&gt;previously&lt;/a&gt;
about how Java configuration systems, boiled down to their essence,
are simply systems for loading Java objects that are described in a
particular way, usually by some kind of name (along with
&lt;a href=&#34;https://lairdnelson.wordpress.com/2021/12/07/qualifiers-and-configuration-coordinates-in-configuration/&#34;&gt;qualifiers&lt;/a&gt;),
and that such systems have absolutely &lt;a href=&#34;https://lairdnelson.wordpress.com/2021/11/07/configuration-and-dependency-acquisition/&#34;&gt;nothing to do with dependency
injection&lt;/a&gt;
or object binding or all the rest of the shiny but irrelevant things
people like to get excited about in this space.&lt;/p&gt;
&lt;p&gt;These ideas are not new.  In the Java enterprise world, they first
showed up in a systematic way in the &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/module-summary.html&#34;&gt;Java Naming and Directory
Interface (JNDI)
API&lt;/a&gt;.
This API, in turn, is a slight modernization, and idiomatic Java
translation, of the &lt;a href=&#34;https://www.omg.org/spec/NAM/1.3/PDF&#34;&gt;Object Management Group&amp;rsquo;s Naming Service
Specification&lt;/a&gt;, which quietly
stagnated sometime in 2004.&lt;/p&gt;
&lt;p&gt;Somewhere along the line, JNDI got (wrongly) pigeonholed as just a
way to access LDAP servers.  I&amp;rsquo;m going to ignore that entire side of
things (the &amp;ldquo;directory&amp;rdquo; part), because that&amp;rsquo;s not what JNDI primarily
is at all.&lt;/p&gt;
&lt;p&gt;Then it got demonized because of the &lt;code&gt;java:&lt;/code&gt; URL scheme and the
&lt;code&gt;comp/env&lt;/code&gt; naming prefix mandated by the Java EE Platform
Specification to identify a component&amp;rsquo;s environment, but, as we&amp;rsquo;ll
see, the concept underlying this prefix is critical, regardless of how
clunky the actual implementation turned out to be.&lt;/p&gt;
&lt;p&gt;Now JNDI is routinely rejected more simply because of its age than
because of any technical limitations it might have.  Most people have
no idea what it can do.  Having said that, it most certainly does show
its age, and not in a good way.&lt;/p&gt;
&lt;p&gt;So why &lt;em&gt;would&lt;/em&gt; we look at all this?  Because to this day it is the
only Java-related configuration-like system that has appropriately
considered most, if not all, the concerns that arise when you talk
about loading Java objects that are qualified in some way into a
class‚Äîthe very heart of Java-centric configuration use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It accounts for name collisions.&lt;/li&gt;
&lt;li&gt;It has symbolic links.&lt;/li&gt;
&lt;li&gt;It allows for user-supplied name resolution mechanisms.&lt;/li&gt;
&lt;li&gt;It allows for user-supplied namespaces.&lt;/li&gt;
&lt;li&gt;It permits qualifiers to help describe a lookup.&lt;/li&gt;
&lt;li&gt;It does not mandate an object binding strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s somewhat bizarre to note that the Java-centric configuration
frameworks currently &lt;em&gt;en vogue&lt;/em&gt; are so comparatively deficient:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MicroProfile Config certainly has not considered these concerns.
(As I&amp;rsquo;ve &lt;a href=&#34;https://lairdnelson.wordpress.com/2021/10/14/some-of-the-things-i-dont-like-about-microprofile-config/&#34;&gt;written
before&lt;/a&gt;,
it is non-deterministic and subject to namespace clashes.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lightbend&amp;rsquo;s TypeSafe Config has not considered these concerns.
(Names are considered to be absolute.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring has not considered these concerns.  (Names are considered to
be absolute and configured objects are presumed to &amp;ldquo;belong&amp;rdquo; to the
Spring ecosystem.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jakarta Config is stumbling backwards into these concerns without
realizing they are valid concerns, and is repeating the egregious
mistakes of MicroProfile Config before it.  (It is non-deterministic
and subject to namespace clashes and is focusing its standardization
efforts in irrelevant places.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m sure there are others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What if we could extract the age-old lookup-and-namespace-related
concerns that JNDI addresses and re-express them with a modern API?&lt;/strong&gt;
That would make for a pretty decent Java-centric configuration API.&lt;/p&gt;
&lt;p&gt;To catch a glimpse of these concerns and how they are addressed within
JNDI requires a little bit of squinting.  The JNDI API itself is old
and outdated by today&amp;rsquo;s standards.  It predates generics, for one
thing, and &lt;a href=&#34;https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-August/080696.html&#34;&gt;attempts to modernize it, regardless of how trivial, have
been gently and officially
rebuffed&lt;/a&gt;.
For another, it predates the &lt;a href=&#34;&#34;&gt;&lt;code&gt;java.util.ServiceLoader&lt;/code&gt;&lt;/a&gt; convention
of discovering service providers at startup.  It is, in short, a pain
in the neck to work with.&lt;/p&gt;
&lt;p&gt;Getting past these anachronisms and others like them can be a little
tricky, but the journey is worth it.&lt;/p&gt;
&lt;h2 id=&#34;whats-in-a-naming-service-name&#34;&gt;What&amp;rsquo;s In A (Naming Service) Name?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s talk about what a naming service does, and why the terms even
exist, and, as a result, why no one ever thinks of &amp;ldquo;naming service&amp;rdquo; in
the same breath as &amp;ldquo;configuration&amp;rdquo; (but maybe they should).&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;ll talk about JNDI&amp;rsquo;s precursor, the &lt;a href=&#34;https://www.omg.org/spec/NAM/1.3/PDF&#34;&gt;Object Management
Group&amp;rsquo;s Naming Service
Specification&lt;/a&gt;.  I know:
CORBA‚Äîbut bear with me.&lt;/p&gt;
&lt;h3 id=&#34;the-object-management-group-naming-service-specification&#34;&gt;The Object Management Group Naming Service Specification&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s revisit the 1990s for a moment.  &lt;a href=&#34;https://knowyourmeme.com/memes/how-do-you-do-fellow-kids&#34;&gt;How do you do, fellow
kids?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Back in CORBA&amp;rsquo;s day, you could park distributed objects on one
machine, and use another machine to look them up, and the calling
program might be written in an entirely different language from the
serving program.  The sub-programs doing the actual retrieval and
serving were known as ORBs: object request brokers.  As you might
imagine, an object request broker turns a simple local request for a
particular object into a distributed request for that object, and
answers such remote requests as well.&lt;/p&gt;
&lt;p&gt;Because CORBA is cross-language, this meant that each ORB had to be
able to park an object under some kind of location that any requestor
could specify in some way, regardless of the languages involved.  All
languages have strings, and CORBA had ironed out the various language-
and machine-related discrepancies among strings, so the way you
identified the object you wanted to retrieve from some other ORB was
to effectively just name it.  So a &lt;em&gt;naming service&lt;/em&gt;, then, is
something that, when given a string-typed, address-like name of some
kind, gives you back an object bound under that name, suitable for
immediate use in the calling language.  (Usually there was a hazy
presumption that something remote-ish had occurred, e.g. you had
retrieved an object over the network from some other machine
somewhere.  This was because so-called distributed objects were cool.
Now we know better, but the (mostly valid) concepts involved apply
even locally, as we&amp;rsquo;ll see.)&lt;/p&gt;
&lt;p&gt;(More importantly for configuration-related purposes, a name&amp;rsquo;s sole
function, really, is to help distinguish one typed object from another
object bearing the same type.)&lt;/p&gt;
&lt;p&gt;Getting ORBs from different vendors to cooperate was tough, so there
were a lot of specifications that ended up being written by the
&lt;a href=&#34;https://www.omg.org/&#34;&gt;Object Management Group&lt;/a&gt;.  One of them was a
specification governing hierarchical naming semantics, named,
appropriately enough, the &lt;a href=&#34;https://www.omg.org/spec/NAM/1.3/PDF&#34;&gt;Naming Service
Specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing that says, inherently, that a naming service has to be
hierarchical.  But hierarchies can be convenient, and the Naming
Service Specification decided to formally specify tree-based naming
semantics instead of flat ones.  The root of a naming service tree is
a &lt;em&gt;context&lt;/em&gt;; its nodes are &lt;em&gt;objects&lt;/em&gt;; its branches are &lt;em&gt;names&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(A context, of course, is also a kind of object, and again, while
specifying the notion of a child context is not required, that&amp;rsquo;s how
the Naming Service Specification decided to do it.)&lt;/p&gt;
&lt;p&gt;(Some of this hierarchical stuff was due to the inherent chattiness of
CORBA itself: you didn&amp;rsquo;t want to traverse deep graphs with remote
calls for each traversal operation!  Better to grab a context and use
it directly to get its stuff.)&lt;/p&gt;
&lt;p&gt;Among other things, all of this means that, in the Naming Service
Specification, any given name is always relative to a parent context.
There are no absolute names.  If I give you a name, you don&amp;rsquo;t know
what it means or designates (in the absence of other information).
But if I tell you that it&amp;rsquo;s relative to a particular context, then you
have the tools to be able to &lt;em&gt;resolve&lt;/em&gt; the name against that context
and find the object it points to.  A context turns out to be a
namespace (among other things).&lt;/p&gt;
&lt;p&gt;(In the world of name-based configuration this concept is absolutely
critical.  It is ignored by all major Java-centric configuration
frameworks for no good reason that I can see.)&lt;/p&gt;
&lt;p&gt;In the Naming Service Specification, names have structure.  A sequence
of &lt;em&gt;components&lt;/em&gt; within a name forms a &lt;em&gt;compound name&lt;/em&gt;.  Its individual
components are also known as &lt;em&gt;simple names&lt;/em&gt;.  Finally, if you have a
compound name with two components (simple names), there is also one
context involved: the one that the first component desginates, and to
which the second component is relative. (To belabor an earlier point,
note that the first component (simple name) is relative to some
context but in this example I haven&amp;rsquo;t told you what it is, so,
standing on its own, this hypothetical compound name is rather
useless.)&lt;/p&gt;
&lt;p&gt;The Naming Service Specification also gestures feebly at another type
of identifier that is sort of part of names: &lt;em&gt;kind&lt;/em&gt;.  It reads, in
part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;kind&lt;/strong&gt; attribute adds descriptive power to names in a
syntax-independent way.  Examples of the value of the &lt;strong&gt;kind&lt;/strong&gt;
attribute include &lt;em&gt;c_source&lt;/em&gt;, &lt;em&gt;object_code&lt;/em&gt;, &lt;em&gt;executable&lt;/em&gt;,
&lt;em&gt;postscript&lt;/em&gt;, or ‚Äú ‚Äù. The naming system does not interpret, assign, or
manage these values in any way. Higher levels of software may make
policies about the use and management of these values. This feature
addresses the needs of applications that use syntactic naming
conventions to distinguish related objects. For example Unix uses
suffixes such as &lt;strong&gt;.c&lt;/strong&gt; and &lt;strong&gt;.o&lt;/strong&gt;. Applications (such as the C
compiler) depend on these syntactic convention to make name
transformations (for example, to transform &lt;strong&gt;foo.c&lt;/strong&gt; to &lt;strong&gt;foo.o&lt;/strong&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(This reads as a kind of primitive precursor to MIME types.  It also
demonstrates, inadvertently, that any system that uses a &amp;ldquo;name&amp;rdquo; to
look something up eventually realizes that it &lt;em&gt;must&lt;/em&gt; use
&lt;a href=&#34;https://lairdnelson.wordpress.com/2021/12/07/qualifiers-and-configuration-coordinates-in-configuration/&#34;&gt;&lt;em&gt;qualifiers&lt;/em&gt;&lt;/a&gt;
to look something up instead.  JAX-RS matrix parameters, and HTTP
headers, are other examples of this sort of thing.  There&amp;rsquo;s plenty
more to say about this, but not here.)&lt;/p&gt;
&lt;h2 id=&#34;jndi&#34;&gt;JNDI&lt;/h2&gt;
&lt;p&gt;JNDI&amp;rsquo;s naming services are a very straightforward translation of the
language-independent terminology of the Naming Service Specification
into relatively idiomatic Java terms.&lt;/p&gt;
&lt;p&gt;JNDI, like the Naming Service Specification, has a &lt;code&gt;Context&lt;/code&gt;, which,
like its namesake, is a locus of
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Name.html&#34;&gt;&lt;code&gt;Name&lt;/code&gt;s&lt;/a&gt;
that designate &lt;code&gt;Object&lt;/code&gt;s (including other &lt;code&gt;Context&lt;/code&gt;s).  (A &lt;code&gt;Context&lt;/code&gt;
belongs to a &lt;em&gt;naming system&lt;/em&gt;, which is a conceptual entity seemingly
introduced by the JNDI specification and not really present in the
Naming Service Specification.)&lt;/p&gt;
&lt;p&gt;JNDI&amp;rsquo;s
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Name.html&#34;&gt;&lt;code&gt;Name&lt;/code&gt;s&lt;/a&gt;
are like those of the Naming Service Specification, but do not
explicitly include the concept of &lt;em&gt;simple&lt;/em&gt; names.  Instead, a JNDI
name is always either a &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/CompoundName.html&#34;&gt;compound
name&lt;/a&gt;,
even if it has only one component, or a &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/CompositeName.html&#34;&gt;&lt;em&gt;composite
name&lt;/em&gt;&lt;/a&gt;,
a term not mentioned in the Naming Service Specification.  (Composite
names were added in a JNDI specification revision, and allow a single
name to automatically span actual naming systems, with sophisticated
parsing semantics.)  Within any given naming system, hierarchical or
flat, you&amp;rsquo;re always working with compound names.&lt;/p&gt;
&lt;p&gt;Like the Naming Service Specification, any given JNDI
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Name.html&#34;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;
is always relative to a parent &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;bootstrapping&#34;&gt;Bootstrapping&lt;/h3&gt;
&lt;p&gt;JNDI allows an implementor to bootstrap itself.  This is fairly
unique, even today.&lt;/p&gt;
&lt;p&gt;Specifically, the
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/InitialContext.html&#34;&gt;&lt;code&gt;InitialContext&lt;/code&gt;&lt;/a&gt;
class is just a &lt;code&gt;Context&lt;/code&gt; implementation that finds a &amp;ldquo;real&amp;rdquo; &lt;code&gt;Context&lt;/code&gt;
implementation to use, and then delegates all operations to it.  The
JNDI bootstrap mechanism, which predates the &lt;code&gt;java.util.ServiceLoader&lt;/code&gt;
service provider approach but which seems to have served as its
inspiration, allows custom &lt;code&gt;InitialContext&lt;/code&gt; implementations to be
supplied from outside of the framework.&lt;/p&gt;
&lt;p&gt;This means, among other things, the &lt;code&gt;Context&lt;/code&gt; to which primordial
&lt;code&gt;Name&lt;/code&gt;s are relative is highly customizable, even by end users.&lt;/p&gt;
&lt;p&gt;In today&amp;rsquo;s Java world, someone would probably have introduced
(needlessly) a builder-style object, or a whole scaffolding framework
for finding the root &lt;code&gt;Context&lt;/code&gt;.  In JNDI, you just call &lt;code&gt;new InitialContext()&lt;/code&gt; and you&amp;rsquo;re done, as it should be.&lt;/p&gt;
&lt;h3 id=&#34;retrieval-operations&#34;&gt;Retrieval Operations&lt;/h3&gt;
&lt;p&gt;From the looking-things-up perspective, that&amp;rsquo;s about it.  Get your
hands on a
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Context.html&#34;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Context.html#lookup(javax.naming.Name)&#34;&gt;ask it for an &lt;code&gt;Object&lt;/code&gt; under a particular
&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;,
and make use of the resulting &lt;code&gt;Object&lt;/code&gt;.  Where the &lt;code&gt;Object&lt;/code&gt; came from,
how it was bound, whether it was synthesized out of other &lt;code&gt;Object&lt;/code&gt;s,
whether various kinds of links and redirects were followed, whether
the &lt;code&gt;Object&lt;/code&gt; fronts some other kind of system‚Äînone of these things are
your concern.  You named an &lt;code&gt;Object&lt;/code&gt;, you resolved that name against a
&lt;code&gt;Context&lt;/code&gt;, and you took delivery of that &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of particular note, you probably also cast that &lt;code&gt;Object&lt;/code&gt; to a type you
were expecting.  More on that later.  Peeking ahead for a moment, a
name always has a conceptual type that the caller, for the most part,
is expecting.&lt;/p&gt;
&lt;h3 id=&#34;binding-operations&#34;&gt;Binding Operations&lt;/h3&gt;
&lt;p&gt;Since JNDI emerged from the CORBA world and was a faithful carryover
of the Naming Service Specification, it also handled the &amp;ldquo;writing
side&amp;rdquo; of naming services.  Placing an &lt;code&gt;Object&lt;/code&gt; under a &lt;code&gt;Name&lt;/code&gt; in JNDI
is known as &lt;em&gt;binding&lt;/em&gt;.  For my purposes, I&amp;rsquo;ll be ignoring all binding
operations.  Java EE, in fact, one of the earliest consumers of JNDI,
required that &lt;code&gt;Context&lt;/code&gt;s exposed to the end user be read-only, and
it&amp;rsquo;s a regrettable fact (in my opinion) that the mutating operations
of JNDI were not split into their own sub-specification.&lt;/p&gt;
&lt;h3 id=&#34;name-to-object-bindings&#34;&gt;Name-to-&lt;code&gt;Object&lt;/code&gt; Bindings&lt;/h3&gt;
&lt;p&gt;For ordinary use cases, a &lt;code&gt;Name&lt;/code&gt; in JNDI is always conceptually bound
to some kind of &lt;code&gt;Object&lt;/code&gt;.  This means that a &lt;code&gt;Name&lt;/code&gt;, regardless of how
many components it might have, also has an effective (Java) type,
namely, that of the &lt;code&gt;Object&lt;/code&gt; that it references.&lt;/p&gt;
&lt;p&gt;JNDI has a few clunky introspective APIs for listing bindings, but for
my purposes I&amp;rsquo;m going to ignore them, since in configuration use cases
you already know the name of the thing you&amp;rsquo;re looking up.  What&amp;rsquo;s
mainly important here is that a &lt;code&gt;Name&lt;/code&gt;, when resolved against a
&lt;code&gt;Context&lt;/code&gt;, is effectively typed by a Java class.&lt;/p&gt;
&lt;h3 id=&#34;synthesizing-operations&#34;&gt;Synthesizing Operations&lt;/h3&gt;
&lt;p&gt;JNDI has a facility, not found in the Naming Service Specification,
that permits some other Java object to synthesize a Java object out of
&amp;ldquo;raw materials&amp;rdquo;, any of which may be bound in a tree rooted at any
&lt;code&gt;Context&lt;/code&gt;.  This object doing the synthesizing is called an
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/spi/ObjectFactory.html&#34;&gt;&lt;code&gt;ObjectFactory&lt;/code&gt;&lt;/a&gt;.
A JNDI implementation itself can supply &lt;code&gt;ObjectFactory&lt;/code&gt; instances,
but, more importantly for this article&amp;rsquo;s purposes, so can users and
component providers.&lt;/p&gt;
&lt;p&gt;This sounds complicated but is actually fairly simple.&lt;/p&gt;
&lt;p&gt;Recall that when you look something up in a JNDI tree rooted under a
&lt;code&gt;Context&lt;/code&gt;, you are blissfully unaware of the name resolution process
(how the &lt;code&gt;Object&lt;/code&gt; that is eventually delivered to you came to exist).
Was it put together out of other things?  Was it created out of
nothing?  Was it loaded from disk?  Served over the network?  You
don&amp;rsquo;t know and you don&amp;rsquo;t care.&lt;/p&gt;
&lt;p&gt;For certain cases, name resolution is absurdly simple: someone
explicitly bound a textual string into a &lt;code&gt;Context&lt;/code&gt; under, say, the
name &amp;ldquo;&lt;code&gt;hoopy&lt;/code&gt;&amp;rdquo;; you asked for the &lt;code&gt;Object&lt;/code&gt; bound under &amp;ldquo;&lt;code&gt;hoopy&lt;/code&gt;&amp;rdquo;; and
lo and behold you got back that very string‚Äîperhaps &amp;ldquo;&lt;code&gt;frood&lt;/code&gt;&amp;quot;‚Äîas a
Java &lt;code&gt;String&lt;/code&gt; object.  Nothing fancy here.&lt;/p&gt;
&lt;h4 id=&#34;objectfactory&#34;&gt;&lt;code&gt;ObjectFactory&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In other cases, an
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/spi/ObjectFactory.html&#34;&gt;&lt;code&gt;ObjectFactory&lt;/code&gt;&lt;/a&gt;
gets involved.  This happens because the &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Context.html#lookup(javax.naming.Name)&#34;&gt;&lt;code&gt;Context::lookup&lt;/code&gt;
operation&lt;/a&gt;
delegates, in all implementations that I&amp;rsquo;m aware of, and perhaps
explicitly stated somewhere, to a call to the
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/spi/NamingManager.html#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)&#34;&gt;&lt;code&gt;NamingManager::getObjectInstance&lt;/code&gt;&lt;/a&gt;
method, which pulls in &lt;code&gt;ObjectFactory&lt;/code&gt; instances to actually perform
the creation (or retrieval, or synthesis, or whatever) of a Java
&lt;code&gt;Object&lt;/code&gt; for a given &lt;code&gt;Name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So backing up from the minutiae for a moment, depending on what
&lt;code&gt;ObjectFactory&lt;/code&gt; instances are on the classpath and properly
designated, a JNDI implementation may synthesize &lt;code&gt;Object&lt;/code&gt;s out of thin
air as if they were bound explicitly to various &lt;code&gt;Name&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ObjectFactory&lt;/code&gt; instances and explicit binding can work together,
too.  An administrator can bind a &lt;a href=&#34;&#34;&gt;&lt;code&gt;Reference&lt;/code&gt;&lt;/a&gt; into a JNDI
implementation that explicitly names the &lt;code&gt;ObjectFactory&lt;/code&gt; to use to
perform the actual name resolution.&lt;/p&gt;
&lt;h5 id=&#34;url-context-factory&#34;&gt;URL Context Factory&lt;/h5&gt;
&lt;p&gt;One kind of &lt;code&gt;ObjectFactory&lt;/code&gt; is one that plays the role of a &lt;em&gt;URL
context factory&lt;/em&gt;.  These kinds of &lt;code&gt;ObjectFactory&lt;/code&gt; implementations can
create &lt;code&gt;Context&lt;/code&gt;s to represent particular URL schemes, such as, most
infamously, &lt;code&gt;java:&lt;/code&gt;, which is at the heart of the Java EE (and now
Jakarta EE) specifications.&lt;/p&gt;
&lt;p&gt;The notorious &lt;code&gt;java:comp/env&lt;/code&gt; &amp;ldquo;prefix&amp;rdquo; is, more specifically, a URL
whose semantics are strictly defined by the Java EE (now Jakarta EE)
Platform Specification.  &lt;code&gt;java:&lt;/code&gt; causes a URL context factory
specified by the Platform Specification to come into the picture, and
&lt;code&gt;comp/env&lt;/code&gt; is a compound name, relative to the root &lt;code&gt;Context&lt;/code&gt; created
by the URL context factory, denoting, by definition, a &lt;code&gt;Context&lt;/code&gt; with
very specific semantics.  One of its specific semantics is very
interesting to configuration systems, because it disambiguates
component namespaces.  That is, if an EJB refers to a &lt;code&gt;Frood&lt;/code&gt; stored
under the name &lt;code&gt;hoopy&lt;/code&gt;, and another EJB refers to a &lt;code&gt;Towel&lt;/code&gt; stored
under the name &lt;code&gt;hoopy&lt;/code&gt;, no conflict can occur, so long as &lt;code&gt;hoopy&lt;/code&gt; is
relative to &lt;code&gt;java:comp/env&lt;/code&gt; in both cases.&lt;/p&gt;
&lt;p&gt;No Java-centric configuration framework that I&amp;rsquo;m aware of other than
JNDI addresses this extremely important concern.&lt;/p&gt;
&lt;h3 id=&#34;event-operations&#34;&gt;Event Operations&lt;/h3&gt;
&lt;p&gt;JNDI features &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/event/EventContext.html&#34;&gt;events that can be
fired&lt;/a&gt;
when a bound object changes, or when an object has been added or
removed.&lt;/p&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting It All Together&lt;/h2&gt;
&lt;p&gt;So backing up to the conceptual level, JNDI provides the ability for
two names to be used by two different components developed in
isolation to refer to two different things, with at least the
&lt;em&gt;possibility&lt;/em&gt; that a name clash will not occur (one component&amp;rsquo;s
&lt;code&gt;java:comp/env&lt;/code&gt; &lt;code&gt;Context&lt;/code&gt; is not the same &lt;code&gt;Context&lt;/code&gt; as another
component&amp;rsquo;s &lt;code&gt;java:comp/env&lt;/code&gt; &lt;code&gt;Context&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In addition, it allows for user-supplied factories to handle
individual name resolution operations.  There is a defined search
order for discovering such factories.  You supply a name, the system
searches until it finds something that can make &lt;code&gt;Object&lt;/code&gt;s for that
name.&lt;/p&gt;
&lt;p&gt;JNDI properly separates the lookup use cases (ask for an &lt;code&gt;Object&lt;/code&gt; of a
particular type by name; receive it) from the binding and
administration use cases (install an &lt;code&gt;ObjectFactory&lt;/code&gt; that knows how to
make an &lt;code&gt;Object&lt;/code&gt; of a particular type; bind that &lt;code&gt;ObjectFactory&lt;/code&gt; to a
particular name), to such a degree that there could have been two
specifications instead of one.&lt;/p&gt;
&lt;p&gt;Operations such as conversion and object binding are deliberately left
unspecified, as it should be.  That is, any given &lt;code&gt;ObjectFactory&lt;/code&gt; may
do whatever it wishes to come up with an &lt;code&gt;Object&lt;/code&gt; for a given name
resolution request.&lt;/p&gt;
&lt;p&gt;At an abstract level, a compound name is a typed path, whose
intermediate nodes may have known types as well.&lt;/p&gt;
&lt;p&gt;If we strip some of the terminology and API cruft away we can say the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In JNDI and configuration systems, there is some kind of root object
to which notional paths are relative.
&lt;ul&gt;
&lt;li&gt;In JNDI this is a &lt;code&gt;Context&lt;/code&gt; and the rootiest of all root
&lt;code&gt;Context&lt;/code&gt;s is an &lt;code&gt;InitialContext&lt;/code&gt;, as the name accurately
reflects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In JNDI and configuration systems, you locate an &lt;code&gt;Object&lt;/code&gt; by
supplying that root object with a typed path that designates the
&lt;code&gt;Object&lt;/code&gt; to retrieve.
&lt;ul&gt;
&lt;li&gt;In JNDI this is a &lt;code&gt;CompoundName&lt;/code&gt; supplied to the
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/Context.html#lookup(javax.naming.Name)&#34;&gt;&lt;code&gt;Context::lookup&lt;/code&gt;&lt;/a&gt;
method, and if you need to figure out what the type is, you can
invoke any of several crufty methods to find the relevant
&lt;code&gt;Class&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In JNDI and configuration systems, some accessory piece of
technology that is registered under that typed path is actually
responsible for making the requested &lt;code&gt;Object&lt;/code&gt; come into existence.
&lt;ul&gt;
&lt;li&gt;In JNDI, this is an &lt;code&gt;ObjectFactory&lt;/code&gt; invoked by way of the
&lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.naming/javax/naming/spi/NamingManager.html#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)&#34;&gt;&lt;code&gt;NamingManager::getObjectInstance&lt;/code&gt;&lt;/a&gt;
method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jndi-flaws&#34;&gt;JNDI Flaws&lt;/h2&gt;
&lt;p&gt;So is JNDI the hipster configuration system that has been hiding in
plain sight?  Yes and no.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve seen that it gets the separation of concerns right, and that its
lookup features are relatively simple, and that it is unique among
configuration systems in understanding the importance of namespaces.
But there are plenty of problems.&lt;/p&gt;
&lt;h3 id=&#34;no-generics&#34;&gt;No Generics&lt;/h3&gt;
&lt;p&gt;First of all, in modern Java, you may not be looking for a &lt;code&gt;List&lt;/code&gt;
under a specific name, but a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;.  JNDI predates generics,
so you&amp;rsquo;ll have to do a lot of casting when you use this API.&lt;/p&gt;
&lt;h3 id=&#34;binding-and-lookup-services-colocated&#34;&gt;Binding and Lookup Services Colocated&lt;/h3&gt;
&lt;p&gt;Next, a &lt;code&gt;Context&lt;/code&gt; has a rather large number of methods because the
lookup and binding services were combined into one interface.  In
hindsight, this was a mistake.&lt;/p&gt;
&lt;h3 id=&#34;vague-qualifiers&#34;&gt;Vague Qualifiers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Context&lt;/code&gt; instances have the ability to have &amp;ldquo;environments&amp;rdquo;, which are
&lt;code&gt;Hashtable&lt;/code&gt;s (yes, &lt;code&gt;Hashtable&lt;/code&gt;s; JNDI predates the collections APIs)
but whose purpose is left vague.  Like any specification that features
an untyped bag of named properties, this is usually a sign that some
aspect of the problem domain wasn&amp;rsquo;t really understood too well.&lt;/p&gt;
&lt;p&gt;If you look at it one way, a &lt;code&gt;Context&lt;/code&gt;&amp;rsquo;s environment is really
additional qualifiers qualifying lookups.  For configuration system
purposes, this concept, which I&amp;rsquo;ve argued is necessary, needs to be
tightened up a little bit.&lt;/p&gt;
&lt;h3 id=&#34;too-many-checked-exceptions&#34;&gt;Too Many Checked Exceptions&lt;/h3&gt;
&lt;p&gt;JNDI was created when checked exceptions were all the rage.  This
makes using it in today&amp;rsquo;s Java projects laborious and unpleasant.
Easy use cases, like using a default value in case a bound value is
not present, are quite difficult as a result.&lt;/p&gt;
&lt;h3 id=&#34;cant-use-class-or-type-as-a-selector&#34;&gt;Can&amp;rsquo;t Use &lt;code&gt;Class&lt;/code&gt; or &lt;code&gt;Type&lt;/code&gt; as a Selector&lt;/h3&gt;
&lt;p&gt;The fact that it is a &lt;code&gt;Name&lt;/code&gt;, and not some other kind of key, that is
used to select &lt;code&gt;Object&lt;/code&gt;s is mostly arbitrary and rooted in CORBA&amp;rsquo;s
distributed objects background.  For Java-centric configuration
systems, what matters most of the time is the type of &lt;code&gt;Object&lt;/code&gt; the
caller is seeking.  Names in this use case are secondary and used
mostly to disambiguate, for example, one kind of &lt;code&gt;Frood&lt;/code&gt; from another
kind of &lt;code&gt;Frood&lt;/code&gt; (perhaps the caller wants the &lt;code&gt;hoopy&lt;/code&gt; &lt;code&gt;Frood&lt;/code&gt; and not
the unnamed &lt;code&gt;Frood&lt;/code&gt;).  JNDI requires that there be names for
&lt;em&gt;everything&lt;/em&gt;, even where they are superfluous.&lt;/p&gt;
&lt;h3 id=&#34;strange-service-provider-location-machinery&#34;&gt;Strange Service Provider Location Machinery&lt;/h3&gt;
&lt;p&gt;JNDI predates the &lt;code&gt;java.util.ServiceLoader&lt;/code&gt; class, so it&amp;rsquo;s no surprise
that its mechanism for finding service provider classes is a bit
arcane.&lt;/p&gt;
&lt;h3 id=&#34;too-much-hierarchy&#34;&gt;Too Much Hierarchy&lt;/h3&gt;
&lt;p&gt;As noted earlier, for configuration system purposes, a tree model is
not necessary.  In most specifications, if you find that something is
not necessary, you leave it out.  There doesn&amp;rsquo;t seem to be a need for
there to be an intermediate &lt;code&gt;Context&lt;/code&gt; &amp;ldquo;in between&amp;rdquo; any two name
components, but it fit a mental model the Naming Service Specification
authors were familiar with, and JNDI tracked that specification, so
here we are.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;JNDI is an old and clunky API with solid conceptual underpinnings that
addresses most, if not all, concerns that any Java-centric
configuration system will encounter.  It is worth using as a kind of
rubric to check any configuration system implementation against for
correctness.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;p&gt;In a future post, I hope to write about JAX-RS from a Java-centric
configuration system perspective.  Seen through this lens, JAX-RS is a
very interesting system for acquiring Java &lt;code&gt;Object&lt;/code&gt;s based on a
combination of names and qualifiers and MIME types, auto-discovering
providers and negotiating and resolving ambiguities.  If you combine
its concepts with JNDI&amp;rsquo;s notion of namespaces and self-bootstrapping,
a design for a Java-centric configuration system falls out rather
easily.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://ljnelson.github.io/blog/welcome/</link>
      <pubDate>Fri, 17 Dec 2021 16:08:01 -0800</pubDate>
      <author>ljnelson@gmail.com (Laird Nelson)</author>
      <guid>https://ljnelson.github.io/blog/welcome/</guid>
      <description>&lt;p&gt;Hello and welcome to my new blog.&lt;/p&gt;
&lt;p&gt;My &lt;a href=&#34;https://lairdnelson.wordpress.com/&#34;&gt;old blog&lt;/a&gt; is still available.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
